{"version":3,"sources":["webpack:///./src/pages/architecture.tsx","webpack:///./src/data/index.tsx","webpack:///./src/components/project-tile/index.tsx","webpack:///(webpack)/buildin/module.js","webpack:///./src/components/breadcrumbs/index.tsx"],"names":["Architecture","data","useStaticQuery","seoProps","title","path","category","Category","renderProjectsDataList","ProjectTile","name","location","year","titleImage","image","images","edges","find","n","node","relativePath","includes","className","to","kebabCase","alt","fluid","childImageSharp","durationFadeIn","imgStyle","objectFit","fadeIn","allSitePage","map","edge","project","context","key","spanXl","spanLg","spanMd","spanSm","module","exports","webpackPolyfill","deprecate","paths","children","Object","defineProperty","enumerable","get","l","i","Breadcrumbs","HomeLink"],"mappings":"4FAAA,mFA2CeA,UAnCM,WACnB,IAAMC,EAAOC,yBAAc,cA0B3B,OACE,gBAAC,IAAD,CAAMC,SAAU,CAAEC,MAAO,eAAgBC,KAAM,kBAC7C,gBAAC,IAAD,CAAaC,SAAUC,IAASP,eAChC,gBAAC,IAAD,KAAMQ,YAAuBP,O,mIC7BvBM,E,qECoBCE,G,UAAc,SAAC,GAA2D,IAAzDC,EAAyD,EAAzDA,KAAMC,EAAmD,EAAnDA,SAAUC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,WAmB5CC,EAlBYZ,yBAAc,cAkBRa,OAAOC,MAAMC,MAAK,SAACC,GACzC,OAAOA,EAAEC,KAAKC,aAAaC,SAASR,MAGtC,OAAKC,EAKH,uBAAKQ,UAAU,kBACb,gBAAC,OAAD,CAAMC,GAAE,IAAMC,oBAAUd,IACtB,uBAAKY,UAAU,yBACb,gBAAC,IAAD,CACEG,IAAKZ,EACLa,MAAOZ,EAAMK,KAAKQ,gBAAgBD,MAClCE,eAAgB,IAChBC,SAAU,CAAEC,UAAW,WACvBC,QAAQ,IAEV,uBAAKT,UAAU,iCACb,uBAAKA,UAAU,sCAAf,OAGJ,uBAAKA,UAAU,wBACZZ,EADH,MACYC,GAAeA,EAAP,KADpB,IAC0CC,KAnBvC,Q,SD5CCL,K,4BAAAA,E,4BAAAA,E,iCAAAA,E,qBAAAA,M,KAyDL,IAAMC,EAAyB,SAACP,GACrC,OAAOA,EAAK+B,YAAYhB,MAAMiB,KAAI,SAACC,GACjC,IAAMC,EAAUD,EAAKf,KAAKiB,QAC1B,OACE,gBAAC,IAAD,CAAQC,IAAKF,EAAQzB,KAAM4B,OAAQ,EAAGC,OAAQ,EAAGC,OAAQ,EAAGC,OAAQ,IAClE,gBAAC,EAAD,CACE/B,KAAMyB,EAAQzB,KACdC,SAAUwB,EAAQxB,SAClBC,KAAMuB,EAAQvB,KACdC,WAAYsB,EAAQtB,mB,mBE3E9B6B,EAAOC,QAAU,SAASD,GAoBzB,OAnBKA,EAAOE,kBACXF,EAAOG,UAAY,aACnBH,EAAOI,MAAQ,GAEVJ,EAAOK,WAAUL,EAAOK,SAAW,IACxCC,OAAOC,eAAeP,EAAQ,SAAU,CACvCQ,YAAY,EACZC,IAAK,WACJ,OAAOT,EAAOU,KAGhBJ,OAAOC,eAAeP,EAAQ,KAAM,CACnCQ,YAAY,EACZC,IAAK,WACJ,OAAOT,EAAOW,KAGhBX,EAAOE,gBAAkB,GAEnBF,I,kCCpBR,8DAUaY,GAVb,UAU2B,SAAC,GAAmC,IAAjChD,EAAiC,EAAjCA,SACtBiD,EAAW,kBAAM,gBAAC,OAAD,CAAMhC,GAAG,KAAT,SACvB,OACE,uBAAKD,UAAU,iBACb,gBAACiC,EAAD,MACCjD,GAAY,MAAMA,M","file":"component---src-pages-architecture-tsx-76128ca050d215d14456.js","sourcesContent":["import * as React from 'react';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { Page } from '../components/page';\nimport { Row } from '../components/grid';\nimport { ProjectsListQuery, renderProjectsDataList, Category } from '../data';\nimport { Breadcrumbs } from '../components/breadcrumbs';\n\nconst Architecture = () => {\n  const data = useStaticQuery<ProjectsListQuery>(\n    graphql`\n      query {\n        allSitePage(\n          filter: { context: { name: { ne: null }, category: { in: [\"architecture\"] } } }\n          sort: { fields: context___year, order: DESC }\n        ) {\n          edges {\n            node {\n              context {\n                name\n                category\n                location\n                year\n                status\n                surface\n                titleImage\n                images\n              }\n            }\n          }\n        }\n      }\n    `,\n  );\n\n  return (\n    <Page seoProps={{ title: 'Architecture', path: '/architecture' }}>\n      <Breadcrumbs category={Category.Architecture} />\n      <Row>{renderProjectsDataList(data)}</Row>\n    </Page>\n  );\n};\n\nexport default Architecture;\n","import * as React from 'react';\n\nimport { FluidObject } from 'gatsby-image';\nimport { Column } from '../components/grid';\nimport { ProjectTile } from '../components/project-tile';\n\n/**\n * Project category.\n */\nexport enum Category {\n  Competitions = 'competitions',\n  Architecture = 'architecture',\n  InteriorDesign = 'interior design',\n  Research = 'research',\n}\n\n/**\n * Project item model.\n */\nexport interface ProjectItem {\n  name: string;\n  category: Category[];\n  location?: string;\n  year: number;\n  status?: string;\n  surface?: number;\n  titleImage: string;\n  images: string[];\n  description?: string;\n}\n\nexport interface ProjectData {\n  allSitePage: {\n    edges: {\n      node: {\n        context: ProjectItem;\n      };\n    }[];\n  };\n}\n\nexport interface ImageNode {\n  relativePath: string;\n  name: string;\n  childImageSharp: {\n    fluid: FluidObject;\n  };\n}\n\nexport interface ImgData {\n  images: {\n    edges: {\n      node: ImageNode;\n    }[];\n  };\n}\n\n/**\n * Project list graphql query result.\n */\nexport type ProjectsListQuery = ProjectData & ImgData;\n\n/**\n * Util that renders project list query result.\n * @param data the data to render\n */\nexport const renderProjectsDataList = (data: ProjectsListQuery) => {\n  return data.allSitePage.edges.map((edge) => {\n    const project = edge.node.context;\n    return (\n      <Column key={project.name} spanXl={3} spanLg={4} spanMd={6} spanSm={12}>\n        <ProjectTile\n          name={project.name}\n          location={project.location}\n          year={project.year}\n          titleImage={project.titleImage}\n        />\n      </Column>\n    );\n  });\n};\n","import * as React from 'react';\nimport { Link } from 'gatsby';\nimport { kebabCase } from 'lodash';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport Img, { FluidObject } from 'gatsby-image';\n\nimport './index.scss';\n\ninterface ProjectTileProps {\n  name: string;\n  location?: string;\n  year: number;\n  titleImage: string;\n}\n\ninterface ProjectTileImgData {\n  images: {\n    edges: {\n      node: {\n        relativePath: string;\n        name: string;\n        childImageSharp: {\n          fluid: FluidObject;\n        };\n      };\n    }[];\n  };\n}\n\nexport const ProjectTile = ({ name, location, year, titleImage }: ProjectTileProps) => {\n  const imageData = useStaticQuery<ProjectTileImgData>(graphql`\n    query {\n      images: allFile(filter: { extension: { regex: \"/(jpg)|(jpeg)|(png)/\" } }) {\n        edges {\n          node {\n            relativePath\n            name\n            childImageSharp {\n              fluid(maxWidth: 800, maxHeight: 800) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = imageData.images.edges.find((n) => {\n    return n.node.relativePath.includes(titleImage);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  return (\n    <div className=\"pz-ProjectTile\">\n      <Link to={`/${kebabCase(name)}`}>\n        <div className=\"pz-ProjectTile__image\">\n          <Img\n            alt={titleImage}\n            fluid={image.node.childImageSharp.fluid}\n            durationFadeIn={500}\n            imgStyle={{ objectFit: 'contain' }}\n            fadeIn={true}\n          />\n          <div className=\"pz-ProjectTile__image-overlay\">\n            <div className=\"pz-ProjectTile__image-overlay-text\">+</div>\n          </div>\n        </div>\n        <div className=\"pz-ProjectTile__info\">\n          {name} | {location && `${location} |`} {year}\n        </div>\n      </Link>\n    </div>\n  );\n};\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","import * as React from 'react';\nimport { Link } from 'gatsby';\n\nimport './index.scss';\nimport { Category } from '../../data';\n\ninterface BreadcrumbsProps {\n  category?: Category;\n}\n\nexport const Breadcrumbs = ({ category }: BreadcrumbsProps) => {\n  const HomeLink = () => <Link to=\"/\">Home</Link>;\n  return (\n    <div className=\"pzBreadcrumbs\">\n      <HomeLink />\n      {category && ` / ${category}`}\n    </div>\n  );\n};\n"],"sourceRoot":""}