{"version":3,"sources":["webpack:///./src/components/image/index.tsx","webpack:///./src/templates/itemTemplate.tsx","webpack:///./src/components/breadcrumbs/index.tsx"],"names":["Image","filename","className","data","desktopImage","desktopImages","edges","find","n","node","relativePath","includes","mobileImage","mobileImages","classes","classNames","imageSources","push","childImageSharp","fluid","media","alt","durationFadeIn","imgStyle","objectFit","objectPosition","fadeIn","pageQuery","ItemTemplate","project","allSitePage","context","title","name","category","linkCategory","spanSm","spanMd","spanLg","spanXl","location","year","surface","description","titleImage","images","map","image","key","Breadcrumbs","HomeLink","to","CategoryLink"],"mappings":"+y6SAgDaA,G,UAAQ,SAAC,GAA2C,IAAzCC,EAAyC,EAAzCA,SAAyC,IAA/BC,iBAA+B,MAAnB,GAAmB,EACzDC,EAAO,OA+BPC,EAAeD,EAAKE,cAAcC,MAAMC,MAAK,SAACC,GAClD,OAAOA,EAAEC,KAAKC,aAAaC,SAASV,MAGhCW,EAAcT,EAAKU,aAAaP,MAAMC,MAAK,SAACC,GAChD,OAAOA,EAAEC,KAAKC,aAAaC,SAASV,MAGtC,IAAKG,IAAiBQ,EACpB,OAAO,KAGT,IAAME,EAAUC,IAAW,SAAUb,GAE/Bc,EAA8B,GASpC,OAPAJ,GAAeI,EAAaC,KAAKL,EAAYH,KAAKS,gBAAgBC,OAClEf,GACEY,EAAaC,KAAb,+BACKb,EAAaK,KAAKS,gBAAgBC,OADvC,IAEEC,MAAO,wBAIT,gBAAC,IAAD,CACEC,IAAKpB,EACLC,UAAWY,EACXK,MAAOH,EACPM,eAAgB,IAChBC,SAAU,CAAEC,UAAW,UAAWC,eAAgB,cAClDC,QAAQ,M,wBC5CDC,EAAY,aAqBVC,UAzEM,SAAC,GAA4B,IAC1CC,EAD0C,EAA1B1B,KACD2B,YAAYxB,MAAM,GAAGG,KAAKsB,QAC/C,OACE,gBAAC,IAAD,CAAMC,MAAOH,EAAQI,KAAM/B,UAAU,mBACnC,gBAAC,IAAD,CAAagC,SAAUL,EAAQK,SAAUC,cAAc,IACvD,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAQC,OAAQ,GAAIC,OAAQ,GAAIC,OAAQ,EAAGC,OAAQ,EAAGrC,UAAU,6BAC9D,gBAAC,IAAD,CAAKA,UAAU,0BAA0B2B,EAAQI,MACjD,gBAAC,IAAD,CAAK/B,UAAU,0BACb,gBAAC,IAAD,CAAQA,UAAU,iCAAlB,YACA,gBAAC,IAAD,CAAQA,UAAU,iCAAiC2B,EAAQW,WAE7D,gBAAC,IAAD,CAAKtC,UAAU,0BACb,gBAAC,IAAD,CAAQA,UAAU,iCAAlB,QACA,gBAAC,IAAD,CAAQA,UAAU,iCAAiC2B,EAAQY,OAE5DZ,EAAQa,QACP,gBAAC,IAAD,CAAKxC,UAAU,0BACb,gBAAC,IAAD,CAAQA,UAAU,iCAAlB,WACA,gBAAC,IAAD,CAAQA,UAAU,iCACZ2B,EAAQa,QADd,KAEE,kCAGF,KAEHb,EAAQc,YACP,gBAAC,IAAD,CAAKzC,UAAU,0BACb,gBAAC,IAAD,CAAQA,UAAU,iCAAlB,eACA,gBAAC,IAAD,CAAQA,UAAU,iCAAiC2B,EAAQc,cAE3D,MAEN,gBAAC,IAAD,CAAQP,OAAQ,GAAIC,OAAQ,GAAIC,OAAQ,EAAGC,OAAQ,GACjD,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAQrC,UAAU,0BAChB,gBAAC,EAAD,CAAOD,SAAU4B,EAAQe,eAG5Bf,EAAQgB,OAAOC,KAAI,SAACC,GAAD,OAClB,gBAAC,IAAD,CAAKC,IAAKD,GACR,gBAAC,IAAD,CAAQ7C,UAAU,0BAChB,gBAAC,EAAD,CAAOD,SAAU8C,c,yGCxDjC,8DAWaE,GAXb,UAW2B,SAAC,GAAwD,IAAtDf,EAAsD,EAAtDA,SAAsD,IAA5CC,oBAA4C,SAC5Ee,EAAW,kBAAM,gBAAC,OAAD,CAAMC,GAAG,KAAT,SACjBC,EAAe,kBAAOjB,EAAe,gBAAC,OAAD,CAAMgB,GAAIjB,GAAWA,GAAmB,gCAAGA,IACtF,OACE,uBAAKhC,UAAU,iBACb,gBAACgD,EAAD,MACA,uCACA,gBAACE,EAAD","file":"component---src-templates-item-template-tsx-7cb26eeee23dab8fe094.js","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport Img, { FluidObject } from 'gatsby-image';\n\nimport './index.scss';\n\n/*\n * This component is built using `gatsby-image` to automatically serve optimized\n * images with lazy loading and reduced file sizes. The image is loaded using a\n * `useStaticQuery`, which allows us to load the image from directly within this\n * component, rather than having to pass the image data down from pages.\n *\n * For more information, see the docs:\n * - `gatsby-image`: https://gatsby.dev/gatsby-image\n * - `useStaticQuery`: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\ninterface ImgData {\n  desktopImages: {\n    edges: {\n      node: {\n        relativePath: string;\n        name: string;\n        childImageSharp: {\n          fluid: FluidObject;\n        };\n      };\n    }[];\n  };\n  mobileImages: {\n    edges: {\n      node: {\n        relativePath: string;\n        name: string;\n        childImageSharp: {\n          fluid: FluidObject;\n        };\n      };\n    }[];\n  };\n}\n\ninterface ImgProps {\n  filename: string;\n  className?: string;\n}\n\nexport const Image = ({ filename, className = '' }: ImgProps) => {\n  const data = useStaticQuery<ImgData>(graphql`\n    query {\n      desktopImages: allFile {\n        edges {\n          node {\n            relativePath\n            name\n            childImageSharp {\n              fluid {\n                ...GatsbyImageSharpFluid_tracedSVG\n              }\n            }\n          }\n        }\n      }\n      mobileImages: allFile {\n        edges {\n          node {\n            relativePath\n            name\n            childImageSharp {\n              fluid(maxWidth: 800, maxHeight: 800) {\n                ...GatsbyImageSharpFluid_tracedSVG\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const desktopImage = data.desktopImages.edges.find((n) => {\n    return n.node.relativePath.includes(filename);\n  });\n\n  const mobileImage = data.mobileImages.edges.find((n) => {\n    return n.node.relativePath.includes(filename);\n  });\n\n  if (!desktopImage && !mobileImage) {\n    return null;\n  }\n\n  const classes = classNames('pz-Img', className);\n\n  const imageSources: FluidObject[] = [];\n\n  mobileImage && imageSources.push(mobileImage.node.childImageSharp.fluid);\n  desktopImage &&\n    imageSources.push({\n      ...desktopImage.node.childImageSharp.fluid,\n      media: `(min-width: 768px)`,\n    });\n\n  return (\n    <Img\n      alt={filename}\n      className={classes}\n      fluid={imageSources}\n      durationFadeIn={500}\n      imgStyle={{ objectFit: 'contain', objectPosition: 'center top' }}\n      fadeIn={true}\n    />\n  );\n};\n","import * as React from 'react';\nimport { graphql } from 'gatsby';\n\nimport { Page } from '../components/page';\nimport { Row, Column } from '../components/grid';\nimport { Image } from '../components/image';\nimport { ProjectsListQuery } from '../data';\nimport './itemTemplate.scss';\nimport { Breadcrumbs } from '../components/breadcrumbs';\n\ninterface TemplateProps {\n  data: ProjectsListQuery;\n}\n\nconst ItemTemplate = ({ data }: TemplateProps) => {\n  const project = data.allSitePage.edges[0].node.context;\n  return (\n    <Page title={project.name} className=\"pz-ItemTemplate\">\n      <Breadcrumbs category={project.category} linkCategory={true} />\n      <Row>\n        <Column spanSm={12} spanMd={12} spanLg={4} spanXl={3} className=\"pz-ItemTemplate__Metadata\">\n          <Row className=\"pz-ItemTemplate__Title\">{project.name}</Row>\n          <Row className=\"pz-ItemTemplate__Field\">\n            <Column className=\"pz-ItemTemplate__Field__Label\">Location</Column>\n            <Column className=\"pz-ItemTemplate__Field__Value\">{project.location}</Column>\n          </Row>\n          <Row className=\"pz-ItemTemplate__Field\">\n            <Column className=\"pz-ItemTemplate__Field__Label\">Year</Column>\n            <Column className=\"pz-ItemTemplate__Field__Value\">{project.year}</Column>\n          </Row>\n          {project.surface ? (\n            <Row className=\"pz-ItemTemplate__Field\">\n              <Column className=\"pz-ItemTemplate__Field__Label\">Surface</Column>\n              <Column className=\"pz-ItemTemplate__Field__Value\">\n                {`${project.surface} m`}\n                <sup>2</sup>\n              </Column>\n            </Row>\n          ) : null}\n\n          {project.description ? (\n            <Row className=\"pz-ItemTemplate__Field\">\n              <Column className=\"pz-ItemTemplate__Field__Label\">Description</Column>\n              <Column className=\"pz-ItemTemplate__Field__Value\">{project.description}</Column>\n            </Row>\n          ) : null}\n        </Column>\n        <Column spanSm={12} spanMd={12} spanLg={8} spanXl={9}>\n          <Row>\n            <Column className=\"pz-ItemTemplate__Image\">\n              <Image filename={project.titleImage} />\n            </Column>\n          </Row>\n          {project.images.map((image) => (\n            <Row key={image}>\n              <Column className=\"pz-ItemTemplate__Image\">\n                <Image filename={image} />\n              </Column>\n            </Row>\n          ))}\n        </Column>\n      </Row>\n    </Page>\n  );\n};\n\nexport const pageQuery = graphql`\n  query($path: String!) {\n    allSitePage(filter: { path: { eq: $path } }) {\n      edges {\n        node {\n          context {\n            name\n            category\n            location\n            year\n            titleImage\n            images\n            surface\n            description\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default ItemTemplate;\n","import * as React from 'react';\nimport { Link } from 'gatsby';\n\nimport { Category } from '../../data';\nimport './index.scss';\n\ninterface BreadcrumbProps {\n  category: Category;\n  linkCategory?: boolean;\n}\n\nexport const Breadcrumbs = ({ category, linkCategory = false }: BreadcrumbProps) => {\n  const HomeLink = () => <Link to=\"/\">Home</Link>;\n  const CategoryLink = () => (linkCategory ? <Link to={category}>{category}</Link> : <>{category}</>);\n  return (\n    <div className=\"pzBreadcrumbs\">\n      <HomeLink />\n      <> / </>\n      <CategoryLink />\n    </div>\n  );\n};\n"],"sourceRoot":""}