{"version":3,"sources":["webpack:///./src/components/image/index.tsx","webpack:///./src/components/breadcrumbs/index.tsx","webpack:///./src/templates/itemTemplate.tsx"],"names":["Image","filename","className","desktopImage","desktopImages","edges","find","n","node","relativePath","includes","classes","classNames","imageSources","push","childImageSharp","fluid","media","alt","durationFadeIn","imgStyle","objectFit","objectPosition","fadeIn","Breadcrumbs","HomeLink","to","pageQuery","ItemTemplate","project","data","allSitePage","context","title","name","spanSm","spanMd","spanLg","spanXl","category","join","location","year","status","surface","description","titleImage","images","map","image","key"],"mappings":"+RAgDaA,G,UAAQ,SAAC,GAA2C,IAAzCC,EAAyC,EAAzCA,SAAyC,IAA/BC,iBAA+B,MAAnB,GAAmB,EAmBzDC,EAlBO,OAkBaC,cAAcC,MAAMC,MAAK,SAACC,GAClD,OAAOA,EAAEC,KAAKC,aAAaC,SAAST,MAGtC,IAAKE,EACH,OAAO,KAGT,IAAMQ,EAAUC,IAAW,SAAUV,GAE/BW,EAA8B,GAQpC,OANAV,GACEU,EAAaC,KAAb,+BACKX,EAAaK,KAAKO,gBAAgBC,OADvC,IAEEC,MAAO,wBAIT,gBAAC,IAAD,CACEC,IAAKjB,EACLC,UAAWS,EACXK,MAAOH,EACPM,eAAgB,IAChBC,SAAU,CAAEC,UAAW,UAAWC,eAAgB,cAClDC,QAAQ,M,wBCvFDC,G,UAAc,WACzB,IAAMC,EAAW,kBAAM,gBAAC,OAAD,CAAMC,GAAG,KAAT,SACvB,OACE,uBAAKxB,UAAU,iBACb,gBAACuB,EAAD,SCmEOE,EAAY,aAsBVC,UApFM,SAAC,GAA4B,IAC1CC,EAD0C,EAA1BC,KACDC,YAAY1B,MAAM,GAAGG,KAAKwB,QAC/C,OACE,gBAAC,IAAD,CAAMC,MAAOJ,EAAQK,KAAMhC,UAAU,mBACnC,gBAAC,EAAD,MACA,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAQiC,OAAQ,GAAIC,OAAQ,GAAIC,OAAQ,EAAGC,OAAQ,EAAGpC,UAAU,6BAC9D,gBAAC,IAAD,CAAKA,UAAU,0BAA0B2B,EAAQK,MACjD,gBAAC,IAAD,CAAKhC,UAAU,0BACb,gBAAC,IAAD,CAAQA,UAAU,iCAAlB,cACA,gBAAC,IAAD,CAAQA,UAAU,iCAAiC2B,EAAQU,SAASC,KAAK,QAE3E,gBAAC,IAAD,CAAKtC,UAAU,0BACb,gBAAC,IAAD,CAAQA,UAAU,iCAAlB,YACA,gBAAC,IAAD,CAAQA,UAAU,iCAAiC2B,EAAQY,WAE7D,gBAAC,IAAD,CAAKvC,UAAU,0BACb,gBAAC,IAAD,CAAQA,UAAU,iCAAlB,QACA,gBAAC,IAAD,CAAQA,UAAU,iCAAiC2B,EAAQa,OAE5Db,EAAQc,OACP,gBAAC,IAAD,CAAKzC,UAAU,0BACb,gBAAC,IAAD,CAAQA,UAAU,iCAAlB,UACA,gBAAC,IAAD,CAAQA,UAAU,iCAAiC2B,EAAQc,SAE3D,KACHd,EAAQe,QACP,gBAAC,IAAD,CAAK1C,UAAU,0BACb,gBAAC,IAAD,CAAQA,UAAU,iCAAlB,WACA,gBAAC,IAAD,CAAQA,UAAU,iCACZ2B,EAAQe,QADd,KAEE,kCAGF,KAEHf,EAAQgB,YACP,gBAAC,IAAD,CAAK3C,UAAU,0BACb,gBAAC,IAAD,CAAQA,UAAU,iCAAlB,eACA,gBAAC,IAAD,CAAQA,UAAU,iCAAiC2B,EAAQgB,cAE3D,MAEN,gBAAC,IAAD,CAAQV,OAAQ,GAAIC,OAAQ,GAAIC,OAAQ,EAAGC,OAAQ,GACjD,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAQpC,UAAU,0BAChB,gBAAC,EAAD,CAAOD,SAAU4B,EAAQiB,eAG5BjB,EAAQkB,OAAOC,KAAI,SAACC,GAAD,OAClB,gBAAC,IAAD,CAAKC,IAAKD,GACR,gBAAC,IAAD,CAAQ/C,UAAU,0BAChB,gBAAC,EAAD,CAAOD,SAAUgD,c","file":"component---src-templates-item-template-tsx-d5737e1ed6ad25fb4945.js","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport Img, { FluidObject } from 'gatsby-image';\n\nimport './index.scss';\n\n/*\n * This component is built using `gatsby-image` to automatically serve optimized\n * images with lazy loading and reduced file sizes. The image is loaded using a\n * `useStaticQuery`, which allows us to load the image from directly within this\n * component, rather than having to pass the image data down from pages.\n *\n * For more information, see the docs:\n * - `gatsby-image`: https://gatsby.dev/gatsby-image\n * - `useStaticQuery`: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\ninterface ImgData {\n  desktopImages: {\n    edges: {\n      node: {\n        relativePath: string;\n        name: string;\n        childImageSharp: {\n          fluid: FluidObject;\n        };\n      };\n    }[];\n  };\n  mobileImages: {\n    edges: {\n      node: {\n        relativePath: string;\n        name: string;\n        childImageSharp: {\n          fluid: FluidObject;\n        };\n      };\n    }[];\n  };\n}\n\ninterface ImgProps {\n  filename: string;\n  className?: string;\n}\n\nexport const Image = ({ filename, className = '' }: ImgProps) => {\n  const data = useStaticQuery<ImgData>(graphql`\n    query {\n      desktopImages: allFile(filter: { extension: { regex: \"/(jpg)|(jpeg)|(png)/\" } }) {\n        edges {\n          node {\n            relativePath\n            name\n            childImageSharp {\n              fluid(maxWidth: 800) {\n                ...GatsbyImageSharpFluid_tracedSVG\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const desktopImage = data.desktopImages.edges.find((n) => {\n    return n.node.relativePath.includes(filename);\n  });\n\n  if (!desktopImage) {\n    return null;\n  }\n\n  const classes = classNames('pz-Img', className);\n\n  const imageSources: FluidObject[] = [];\n\n  desktopImage &&\n    imageSources.push({\n      ...desktopImage.node.childImageSharp.fluid,\n      media: `(min-width: 768px)`,\n    });\n\n  return (\n    <Img\n      alt={filename}\n      className={classes}\n      fluid={imageSources}\n      durationFadeIn={500}\n      imgStyle={{ objectFit: 'contain', objectPosition: 'center top' }}\n      fadeIn={true}\n    />\n  );\n};\n","import * as React from 'react';\nimport { Link } from 'gatsby';\n\nimport './index.scss';\n\nexport const Breadcrumbs = () => {\n  const HomeLink = () => <Link to=\"/\">Home</Link>;\n  return (\n    <div className=\"pzBreadcrumbs\">\n      <HomeLink />\n    </div>\n  );\n};\n","import * as React from 'react';\nimport { graphql } from 'gatsby';\n\nimport { Page } from '../components/page';\nimport { Row, Column } from '../components/grid';\nimport { Image } from '../components/image';\nimport { ProjectsListQuery } from '../data';\nimport './itemTemplate.scss';\nimport { Breadcrumbs } from '../components/breadcrumbs';\n\ninterface TemplateProps {\n  data: ProjectsListQuery;\n}\n\nconst ItemTemplate = ({ data }: TemplateProps) => {\n  const project = data.allSitePage.edges[0].node.context;\n  return (\n    <Page title={project.name} className=\"pz-ItemTemplate\">\n      <Breadcrumbs />\n      <Row>\n        <Column spanSm={12} spanMd={12} spanLg={4} spanXl={3} className=\"pz-ItemTemplate__Metadata\">\n          <Row className=\"pz-ItemTemplate__Title\">{project.name}</Row>\n          <Row className=\"pz-ItemTemplate__Field\">\n            <Column className=\"pz-ItemTemplate__Field__Label\">Categories</Column>\n            <Column className=\"pz-ItemTemplate__Field__Value\">{project.category.join(', ')}</Column>\n          </Row>\n          <Row className=\"pz-ItemTemplate__Field\">\n            <Column className=\"pz-ItemTemplate__Field__Label\">Location</Column>\n            <Column className=\"pz-ItemTemplate__Field__Value\">{project.location}</Column>\n          </Row>\n          <Row className=\"pz-ItemTemplate__Field\">\n            <Column className=\"pz-ItemTemplate__Field__Label\">Year</Column>\n            <Column className=\"pz-ItemTemplate__Field__Value\">{project.year}</Column>\n          </Row>\n          {project.status ? (\n            <Row className=\"pz-ItemTemplate__Field\">\n              <Column className=\"pz-ItemTemplate__Field__Label\">Status</Column>\n              <Column className=\"pz-ItemTemplate__Field__Value\">{project.status}</Column>\n            </Row>\n          ) : null}\n          {project.surface ? (\n            <Row className=\"pz-ItemTemplate__Field\">\n              <Column className=\"pz-ItemTemplate__Field__Label\">Surface</Column>\n              <Column className=\"pz-ItemTemplate__Field__Value\">\n                {`${project.surface} m`}\n                <sup>2</sup>\n              </Column>\n            </Row>\n          ) : null}\n\n          {project.description ? (\n            <Row className=\"pz-ItemTemplate__Field\">\n              <Column className=\"pz-ItemTemplate__Field__Label\">Description</Column>\n              <Column className=\"pz-ItemTemplate__Field__Value\">{project.description}</Column>\n            </Row>\n          ) : null}\n        </Column>\n        <Column spanSm={12} spanMd={12} spanLg={8} spanXl={9}>\n          <Row>\n            <Column className=\"pz-ItemTemplate__Image\">\n              <Image filename={project.titleImage} />\n            </Column>\n          </Row>\n          {project.images.map((image) => (\n            <Row key={image}>\n              <Column className=\"pz-ItemTemplate__Image\">\n                <Image filename={image} />\n              </Column>\n            </Row>\n          ))}\n        </Column>\n      </Row>\n    </Page>\n  );\n};\n\nexport const pageQuery = graphql`\n  query($path: String!) {\n    allSitePage(filter: { path: { eq: $path } }) {\n      edges {\n        node {\n          context {\n            name\n            category\n            location\n            year\n            status\n            surface\n            titleImage\n            images\n            description\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default ItemTemplate;\n"],"sourceRoot":""}